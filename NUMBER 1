import numpy as np
from PIL import Image
from itertools import product

# Q1 (a)
arr = np.array([1, 2, 3, 6, 4, 5])
print(arr[::-1])

# Q1 (b)
array1 = np.array([[1, 2, 3], [2, 4, 5], [1, 2, 3]])
print(array1.ravel())
print(array1.flatten())

# Q1 (c)
arr1 = np.array([[1, 2], [3, 4]])
arr2 = np.array([[1, 2], [3, 4]])
print(np.array_equal(arr1, arr2))

# Q1 (d)
x = np.array([1,2,3,4,5,1,2,1,1,1])
y = np.array([1, 1, 1, 2, 3, 4, 2, 4, 3, 3])
def most_frequent(arr):
    values, counts = np.unique(arr, return_counts=True)
    max_val = values[np.argmax(counts)]
    indices = np.where(arr == max_val)[0]
    return max_val, indices
print(most_frequent(x))
print(most_frequent(y))

# Q1 (e)
gfg = np.matrix('[4, 1, 9; 12, 3, 1; 4, 5, 6]')
print(gfg.sum())
print(gfg.sum(axis=1))
print(gfg.sum(axis=0))

# Q1 (f)
n_array = np.array([[55, 25, 15], [30, 44, 2], [11, 45, 77]])
print(np.trace(n_array))
eig_vals, eig_vecs = np.linalg.eig(n_array)
print(eig_vals)
print(eig_vecs)
print(np.linalg.inv(n_array))
print(np.linalg.det(n_array))

# Q1 (g)
p1 = np.array([[1, 2], [2, 3]])
q1 = np.array([[4, 5], [6, 7]])
print(np.dot(p1, q1))
print(np.cov(np.concatenate((p1.T, q1.T), axis=0)))

p2 = np.array([[1, 2], [2, 3], [4, 5]])
q2 = np.array([[4, 5, 1], [6, 7, 2]])
print(np.dot(p2, q2))

# Q1 (h)
x = np.array([[2, 3, 4], [3, 2, 9]])
y = np.array([[1, 5, 0], [5, 10, 3]])
print(np.inner(x, y))
print(np.outer(x.flatten(), y.flatten()))
print(list(product(x.flatten(), y.flatten())))

# Q2 (a)
array = np.array([[1, -2, 3], [-4, 5, -6]])
print(np.abs(array))
flat = array.flatten()
print(np.percentile(flat, [25, 50, 75]))
print(np.percentile(array, [25, 50, 75], axis=0))
print(np.percentile(array, [25, 50, 75], axis=1))
print(np.mean(flat))
print(np.median(flat))
print(np.std(flat))
print(np.mean(array, axis=0))
print(np.median(array, axis=0))
print(np.std(array, axis=0))
print(np.mean(array, axis=1))
print(np.median(array, axis=1))
print(np.std(array, axis=1))

# Q2 (b)
a = np.array([-1.8, -1.6, -0.5, 0.5, 1.6, 1.8, 3.0])
print(np.floor(a))
print(np.ceil(a))
print(np.trunc(a))
print(np.round(a))

# Q3 (a)
array = np.array([10, 52, 62, 16, 16, 54, 453])
print(np.sort(array))
print(np.argsort(array))
print(np.sort(array)[:4])
print(np.sort(array)[-5:][::-1])

# Q3 (b)
array2 = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0])
print(array2[np.floor(array2) == array2])
print(array2[np.floor(array2) != array2])

# Q4 (a)
def img_to_array(path):
    img = Image.open(path)
    arr = np.array(img)
    if len(arr.shape) == 2:
        np.savetxt("gray_image.txt", arr, fmt="%d")
    elif len(arr.shape) == 3:
        for i in range(arr.shape[2]):
            np.savetxt(f"rgb_channel_{i}.txt", arr[:, :, i], fmt="%d")

# Q4 (b)
def load_image_data(path):
    return np.loadtxt(path)
